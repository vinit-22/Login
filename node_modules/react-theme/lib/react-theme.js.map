{"version":3,"sources":["../src/react-theme.js"],"names":[],"mappings":"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","file":"react-theme.js","sourcesContent":["import merge from 'lodash/object/merge'\nimport assign from 'lodash/object/assign'\nimport forOwn from 'lodash/object/forOwn'\nimport cloneDeep from 'lodash/lang/cloneDeep'\n\nexport default class ReactTheme {\n  constructor(sources) {\n    this._sources = sources || {}\n  }\n\n  clone() {\n    return new ReactTheme(cloneDeep(this._sources))\n  }\n\n  setSource(name, source) {\n    this._sources[name] = source\n  }\n\n  extendSource(name, source) {\n    var originalSource = this._sources[name]\n\n    if (originalSource) {\n      this.setSource(name, (...args) => {\n        var extension = source(...args)\n        var original = originalSource(...args)\n\n        return merge(original, extension)\n      })\n    }\n    else {\n      this.setSource(name, source)\n    }\n  }\n\n  get = (name, mod, additionalStyle) => {\n    console.warn('theme.get() is renamed to theme.getStyle()')\n    return this.getStyle(name, mod, additionalStyle)\n  }\n\n  getStyle(name, mod, additionalStyle) {\n    var styleSrc = this._sources[name]\n\n    if (!styleSrc) {\n      throw Error(`Can't find style source for \"${name}\"`)\n    }\n\n    styleSrc = styleSrc(this, mod)\n\n    if (typeof styleSrc !== 'object') {\n      throw Error(`style source \"${name}\" returned \"${styleSrc}\" instead an object!`)\n    }\n\n    if (styleSrc.mixins) {\n      let mixin = {}\n\n      styleSrc.mixins.slice().forEach(mixinName => {\n\n        merge(mixin, this.getStyle(mixinName, mod))\n      })\n\n      delete styleSrc.mixins\n      styleSrc = merge(mixin, styleSrc)\n    }\n\n    var ret = this.resolveMod(styleSrc, mod)\n\n    var postProcessor = this.getPostProcessor()\n    if (postProcessor) {\n      ret = postProcessor(ret)\n    }\n\n    return (assign(ret, additionalStyle))\n  }\n\n  resolveMod(styleSrc, mod) {\n    forOwn(mod, (value, key) => {\n      if (styleSrc[key]) {\n        var modStyleSrc = styleSrc[key]\n\n        if (typeof value === 'boolean') {\n          if (value) {\n            let modStyle = this.resolveMod(modStyleSrc, mod)\n            assign(styleSrc, modStyle)\n          }\n        }\n        else if (typeof value === 'string') {\n          if (modStyleSrc[value]) {\n            let modStyle = this.resolveMod(modStyleSrc[value], mod)\n            assign(styleSrc, modStyle)\n          }\n        }\n      }\n    })\n\n    return styleSrc\n  }\n\n  setPostProcessor(processor) {\n    this._postProcessor = processor\n  }\n\n  getPostProcessor() {\n    return this._postProcessor\n  }\n}\n"]}